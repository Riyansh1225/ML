Pandas is high performance and easy-to-use data structure.
This is mainly useful for data cleaning and analysis.
Pandas library use the most of the functionalities of the Numpy. Numpy is mandatory to understand the Pandas.
Pandas word derived from the Panel data- an Econometrics from Multidimensional data.
Using Pandas, we can accomplish five typical steps of the preprocessing of the data. 
1. Load
2. Prepare
3. manipulate
4. model 
5. Analyze

Uses of Pandas in Python ::

1. Python become strong script in data analysis because of Pandas.
2. Fast and effective Dataframe object with default and customized indexing.
3. Tools for loading data into in-memory data objects from different file formates.
4. Data alignment and integrated handling of missing data.
5. Reshaping and pivoting of data sets.
6. Lable-base slicing , indexing and subsetting of large data sets.
7. Columns fron data structre can be deleted or inserted.
8. Group by data for aggregation and transformation.
9. High performance merging and joining of data.
10. Time series functionlaity.

Pandas deal with below three data structure.

1. Series 
2. DataFrame 
3. Panel

These data structure are build on top of the Numpy array, which means they are fast.

Mutable ---> A mutable object can be changed after creating the objct. Means contensts can be changed.
           Eg :: int , float , bool , tuple etc.
Immutable ---> An immutable object cannot be changed once its created. Eg : list , set , dict etc..

--> All Pandas data structure are value mutable ( can be changed ) and except series all are size mutable. Series is size immutable.

--> Data Frames are mostly used data structure in Pandas. Panel is used less.

Below is some properties for data structure of Pandas.

1. Series 

  a. Homogeneous data
  b. Size Immutable
  c. Values of Data mutable
  
2. Data Frame 

  a. Heterogeneous data
  b. Size Mutable
  c. Data Mutable 
  
3. Panel 

  a. Heterogeneous data
  b. Size Mutable
  c. Data Mutable
   
 Homogeneous data --> If the variables of same data , we can call as Homogeneous data ( binary Or  categorical ) 
 Heterogeneous data --> If the variables of different type od data , we can call as Heterogeneous data ( binary + categorical ) 
 
 # Data frame is 2D Array with Hetrogenous data. Eg :: Data in table. 
 
 ************************************** Series ****************************************
 # Series are one dimensional array objects. Capable of hold any type of data in the objects.
 # Synatx --> pandas.series(data,index,dtype,copy)
 # A series can be created using different inpus like 
    a. Array
    b. Dict
    c.Scalar value or constant
    
# Create an empty series ::    
    
import pandas as pd
s=pd.Series()
print (s)

Output ::

Series([], dtype: float64)

# Create a Series from ndarray ::

# If the data is an ndarry, then index passes must be of the same lenght. 
# If no index is passed, then default will be range(n). where n is array length. ( 0,1,2,3,4,5...)

import numpy as np
import pandas as pd
a=np.array([1,2,3,4,5,6])
s=pd.Series(a)
print (s)

Output ::

0    1
1    2
2    3
3    4
4    5
5    6
dtype: int32

# Here Index will start from 0 to len(data)-1.

import numpy as np
import pandas as pd
a=np.array([1,2,3,4,5,6])
s=pd.Series(a,index=[2,6,7,8,9,1])
print (s)

Output ::

2    1
6    2
7    3
8    4
9    5
1    6
dtype: int32

# Create a Series from dict ::

# A dict can be passes as input and if no index is specified, then dict is taken in sorted order to construct index.
# if index is passes, then values is data corresponding to the lables in the index passed will be pulled out.

Example 1 ::

import numpy as np
import pandas as pd
#a=np.array(['a':1,'b':2,'c':3,'d':4,'e':5,'f':6])
a={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}
s=pd.Series(a)
#s=pd.Series(a,index=[2,6,7,8,9,1])
print (s)

Output ::

a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64

Example 2 ::

import numpy as np
import pandas as pd
a={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}
s=pd.Series(a,index=['c','d','a','b','f','e'])
print (s)
 
Output ::

c    3
d    4
a    1
b    2
f    6
e    5
dtype: int64

# In Index , if Missed values specified, we will mention that position as NaN.

# Create a Series from Scalar

# If data is Sclar values, Index must be specified. The value will be repeated to match the lenght of the index.

import numpy as np
import pandas as pd
a=pd.Series(5,index=[1,2,3,4])
print (a)

Output ::

1    5
2    5
3    5
4    5
dtype: int64

# Accessing Data from Series with Position ::

# Data in series can be accessed similar to that in an ndarray.

Example 1 ::

import pandas as pd
a=pd.Series([2,3,4,5,6,7,8],index=['x','v','r','y','u','a','t'])
print (a[0])

Output ::

2

Example 2 :: 

import pandas as pd
a=pd.Series([2,3,4,5,6,7,8],index=['x','v','r','y','u','a','t'])
print (a[:8])

Output ::

x    2
v    3
r    4
y    5
u    6
a    7
t    8
dtype: int64

# Retrieve Data Using Label (Index) ::

A Series is like a fixed-size dict in that you can get and set values by index label.

import numpy as np
import pandas as pd
x=np.array([1,2,3,4,5,6,7])
a=pd.Series(x,index=['x','v','r','y','u','a','t'])
print (a['u'])

Output ::

5

Example 2 ::

import numpy as np
import pandas as pd
x=np.array([1,2,3,4,5,6,7])
a=pd.Series(x,index=['x','v','r','y','u','a','t'])
print (a[:4])

Output ::

x    1
v    2
r    3
y    4
dtype: int32

Example 3 ::

import numpy as np
import pandas as pd
x=np.array([1,2,3,4,5,6,7])
a=pd.Series(x,index=['x','v','r','y','u','a','t'])
print (a[['r','u','a']])

Output ::

r    3
u    5
a    6
dtype: int32

*********************************** Python Pandas - DataFrame ***************************************

# The Data frame is 2D data structure. That means data is aligned in a tabular formate. Thats in rows and column.
# Below are some features of Data Frame.

1. Potentially columns are of different types.
2. Size - Mutable
3. Labled axes ( Rows and Columns )
4. Can perform Arthimatic operations on rows and columns.

# Below is syntax for the Pandas Data Frame 

# Pd.DataFrame(data,index,columns,dtype,copy)
# Pandas Data Frame can be created using the below items
  1.List
  2.dict
  3.Series
  4.Numpy ndarray
  5.Another DataFrame
  
# Create an Empty DataFrame :

import numpy as np
import pandas as pd
a=pd.DataFrame()
print (a)

Output ::

Empty DataFrame
Columns: []
Index: []

# Create a DataFrame from Lists

import numpy as np
import pandas as pd
a=np.array([[1,2,3,4],[5,6,7,8]])
a=pd.DataFrame(a,columns=['age','Number','ysysy','sdfsd'])
print (a)

Output ::

  age  Number  ysysy  sdfsd
0    1       2      3      4
1    5       6      7      8


# Create a DataFrame from Dict of ndarrays / Lists 

import numpy as np
import pandas as pd
a={'Name':['Phani','Aruna','Riyansh','Saaharsh'], 'Age':[34,29,1.3,1]}
b=pd.DataFrame(a,columns=['Name','Age'])
print (b)

# Observe the values 0,1,2,3. They are the default index assigned to each using the function range(n).

# Example 3 ::

import numpy as np
import pandas as pd
a={'Name':['Phani','Aruna','Riyansh','Saaharsh'], 'Age':[34,29,1.3,1]}
b=pd.DataFrame(a,columns=['Name','Age'], index=['Father','Mother','First','Second'])
print (b)

Output ::

            Name   Age
Father     Phani  34.0
Mother     Aruna  29.0
First    Riyansh   1.3
Second  Saaharsh   1.0

# Create a DataFrame from List of Dicts

import numpy as np
import pandas as pd
a=[{'a':1,'b':2},{'a':4,'b':5,'c':6}]
b=pd.DataFrame(a,index=('rank1','rank2'))
print (b)

Output ::

       a  b    c
rank1  1  2  NaN
rank2  4  5  6.0

# If the specified column not in list, it will give the values in that column as NaN

# Create a DataFrame from Dict of Series 

# Dictionary of Series can be passed to form a DataFrame. 
# The resultant index is the union of all the series indexes passed.

import pandas as pd
import numpy as np
a={'a':pd.Series(np.arange(5), index=['one','two','three','four','five']),'b':pd.Series(np.arange(6),index=['one','two','three','four','five','Six'])}
d=pd.DataFrame(a,columns=['a','b'])
print (d)

Output ::

         a  b
Six    NaN  5
five   4.0  4
four   3.0  3
one    0.0  0
three  2.0  2
two    1.0  1

# Column Selection ::

import pandas as pd
import numpy as np
x={'a':pd.Series(np.arange(5), index=['a','b','c','d','e'],dtype=int),'b':pd.Series(np.arange(6),index=['a','b','c','d','e','f'])}
d=pd.DataFrame(x)
print (d)
print ('\n')
print (d['a'])

Output ::

     a  b
a  0.0  0
b  1.0  1
c  2.0  2
d  3.0  3
e  4.0  4
f  NaN  5


a    0.0
b    1.0
c    2.0
d    3.0
e    4.0
f    NaN
Name: a, dtype: float64

#Column Addition ::

# Adding column to the existing DataFrame.

# Below is good example for incremental addition of columns to the Data Frame.

import pandas as pd
import numpy as np
x={'a':pd.Series(np.arange(5), index=['a','b','c','d','e'],dtype=int),'b':pd.Series(np.arange(6),index=['a','b','c','d','e','f'])}
d=pd.DataFrame(x)
print (d)
print ('\n')
print (d['a'])
d['c'] = pd.Series(np.arange(5,10), index=['a','b','c','d','e'])
e=pd.DataFrame(d)
print (e)
d['d'] = d['a'] + d['b']
f=pd.DataFrame(d)
print (f)

Output ::

     a  b
a  0.0  0
b  1.0  1
c  2.0  2
d  3.0  3
e  4.0  4
f  NaN  5


a    0.0
b    1.0
c    2.0
d    3.0
e    4.0
f    NaN
Name: a, dtype: float64
     a  b    c
a  0.0  0  5.0
b  1.0  1  6.0
c  2.0  2  7.0
d  3.0  3  8.0
e  4.0  4  9.0
f  NaN  5  NaN
     a  b    c    d
a  0.0  0  5.0  0.0
b  1.0  1  6.0  2.0
c  2.0  2  7.0  4.0
d  3.0  3  8.0  6.0
e  4.0  4  9.0  8.0
f  NaN  5  NaN  NaN

# Deleting Column from the Data Frame 

import pandas as pd
import numpy as np
x={'a':pd.Series(np.arange(5), index=['a','b','c','d','e'],dtype=int),'b':pd.Series(np.arange(6),index=['a','b','c','d','e','f'])}
d=pd.DataFrame(x)
print (d)
print ('\n')
print (d['a'])
d['c'] = pd.Series(np.arange(5,10), index=['a','b','c','d','e'])
e=pd.DataFrame(d)
print (e)
d['d'] = d['a'] + d['b']
f=pd.DataFrame(d)
print (f)
d['h'] = d['c'] - d['a']
i=pd.DataFrame(d)
print (i)
del i['c']
print (i)
i.pop('d')
print (i)


Output ::

     a  b
a  0.0  0
b  1.0  1
c  2.0  2
d  3.0  3
e  4.0  4
f  NaN  5


a    0.0
b    1.0
c    2.0
d    3.0
e    4.0
f    NaN
Name: a, dtype: float64
     a  b    c
a  0.0  0  5.0
b  1.0  1  6.0
c  2.0  2  7.0
d  3.0  3  8.0
e  4.0  4  9.0
f  NaN  5  NaN
     a  b    c    d
a  0.0  0  5.0  0.0
b  1.0  1  6.0  2.0
c  2.0  2  7.0  4.0
d  3.0  3  8.0  6.0
e  4.0  4  9.0  8.0
f  NaN  5  NaN  NaN
     a  b    c    d    h
a  0.0  0  5.0  0.0  5.0
b  1.0  1  6.0  2.0  5.0
c  2.0  2  7.0  4.0  5.0
d  3.0  3  8.0  6.0  5.0
e  4.0  4  9.0  8.0  5.0
f  NaN  5  NaN  NaN  NaN
     a  b    d    h
a  0.0  0  0.0  5.0
b  1.0  1  2.0  5.0
c  2.0  2  4.0  5.0
d  3.0  3  6.0  5.0
e  4.0  4  8.0  5.0
f  NaN  5  NaN  NaN
     a  b    h
a  0.0  0  5.0
b  1.0  1  5.0
c  2.0  2  5.0
d  3.0  3  5.0
e  4.0  4  5.0
f  NaN  5  NaN

# Row Selection, Addition, and Deletion ::

# Selection by Label ---->

# Here loc is used to select the particular row from the Data Frame.

import pandas as pd
d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print (df.loc['b'])

Output ::

  one  two
a  1.0    1
b  2.0    2
c  3.0    3
d  NaN    4
one    2.0
two    2.0
Name: b, dtype: float64

# # Selection by integer location ---->

import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'two' : pd.Series([5, 6, 7, 8], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print (df)
print (df.iloc[2])

Output ::

   one  two
a  1.0    5
b  2.0    6
c  3.0    7
d  NaN    8
one    3.0
two    7.0
Name: c, dtype: float64

# Slice Rows --> Multiple rows can be selected using ‘ : ’ operator.

import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'two' : pd.Series([5, 6, 7, 8], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print (df)
print (df[2:4])


Output ::

   one  two
a  1.0    5
b  2.0    6
c  3.0    7
d  NaN    8
   one  two
c  3.0    7
d  NaN    8

# Addition of Rows ---> 
# Add new rows to a DataFrame using the append function. 
# This function will append the rows at the end.

Example 1 ::

import pandas as pd
df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
print (df)
print ('\n')
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])
print (df2)
print ('\n')
df = df.append(df2)
print( df )

Output ::

   a  b
0  1  2
1  3  4


   a  b
0  5  6
1  7  8


   a  b
0  1  2
1  3  4
0  5  6
1  7  8

# Deletion of Rows --> Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.

# If you observe, in the above example, the labels are duplicate. Let us drop a label and will see how many rows will get dropped.

import pandas as pd
df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
print (df)
print ('\n')
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])
print (df2)
print ('\n')
df = df.append(df2)
print( df )
print ('\n')
df1=df.drop(0)
print (df1)

Output ::

   a  b
0  1  2
1  3  4


   a  b
0  5  6
1  7  8


   a  b
0  1  2
1  3  4
0  5  6
1  7  8


   a  b
1  3  4
1  7  8

************************************************Python Pandas - Panel*******************************************************

# Prepare Notes after all Pandas Concept. Because revision was done but not updated in github, because of Internent failure.


********************************Python Pandas - Basic Functionality *********************************************************

# Series Basic Functionality ::

# Below are some of basis functionality of the Pandas.

# axes --> Returns a list of row axis labels 

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(6))
print (a)
c=a.axes
print (c)

Output ::

0    0.716435
1    0.292761
2    0.868307
3    0.995387
4    0.310636
5    0.509957
dtype: float64
[RangeIndex(start=0, stop=6, step=1)]

The above result is a compact format of a list of values from 0 to 5, i.e., [0,1,2,3,4].

# empty --> This returns the boolen value saying whether the object is empty or not. True indicates object is empty.

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(6))
print (a)
c=a.empty
print (c)

Output ::

0    0.591395
1    0.645653
2    0.978485
3    0.278888
4    0.237646
5    0.076359
dtype: float64
False

# ndim --> This returns the number of dimensions of the object. By defination series is 1D array data structure. So it always returns the  dimension as 1.

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(6))
print (a)
c=a.ndim
print (c)

Output ::

0    0.976979
1    0.541322
2    0.172439
3    0.304920
4    0.130064
5    0.713022
dtype: float64
1

# Size --> This function returns the size(lenght) of the series.

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(6))
print (a)
c=a.size
print (c)

Output ::

0    0.449930
1    0.253682
2    0.228423
3    0.503158
4    0.388848
5    0.415844
dtype: float64
6

# values --> Returns the actual data in the series as an array.

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(6))
print (a)
c=a.values
print (c)

Output ::

0    0.563837
1    0.673065
2    0.510499
3    0.986493
4    0.179891
5    0.398998
dtype: float64
[0.56383724 0.6730654  0.510499   0.98649302 0.17989082 0.39899801]

# Head & Tail --> This function will return the small sample of a series or the DataFrame object.
# head () --> This function will return the first n rows ( observe the index). The default number to display the elements is 5.
# tail () --> This function will return the last n rows ( observe the index ). The default number to display the elements is 5.


import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(15))
print (a)
c=a.head(5)
print (c)


Output ::

0     0.514595
1     0.502149
2     0.830062
3     0.759707
4     0.739565
5     0.194634
6     0.362047
7     0.477029
8     0.515915
9     0.348376
10    0.892260
11    0.020616
12    0.389300
13    0.145840
14    0.727666
dtype: float64
0    0.514595
1    0.502149
2    0.830062
3    0.759707
4    0.739565
dtype: float64

Example 2 ::

import numpy as np
import pandas as pd
a=pd.Series(np.random.rand(15))
print (a)
c=a.tail(5)
print (c)

Output ::

0     0.769581
1     0.610169
2     0.737238
3     0.104956
4     0.395688
5     0.504943
6     0.481414
7     0.579250
8     0.288244
9     0.288249
10    0.172426
11    0.850092
12    0.948820
13    0.788822
14    0.930962
dtype: float64
10    0.172426
11    0.850092
12    0.948820
13    0.788822
14    0.930962
dtype: float64

############################ DataFrame Basic Functionality ######################################################################


# Tranpose --> This function will convert rows to columns and columns to rows.

Example 1 :: 

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.T)

Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


     a    b    c    d
x  1.0  2.0  3.0  NaN
y  1.0  2.0  3.0  4.0

# axes --> Return the list of row axis lables and column axis lables

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.axes)

Output ::

    x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


[Index(['a', 'b', 'c', 'd'], dtype='object'), Index(['x', 'y'], dtype='object')]

# dtypes --> Return the datatype of each column.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.dtypes)

Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


x    float64
y      int64
dtype: object

# empty --> Return the boolen value , whethe the object is empty or not. if the object is empty this will return as True else false.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.empty)


Output ::

    x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


False

# ndim --> Returns the number of dimensions of the object. By definition, DataFrame is a 2D object.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.ndim)


Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


2

# shape --> Returns a tuple representing the dimensionality of the DataFrame. 
# Tuple (a,b), where a represents the number of rows and b represents the number of columns.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.shape)

Output ::

    x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


(4, 2)

# size --> Returns the number of elements in DataFrame.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.size)

Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4

8

# values --> Return the actual data in DataFrame.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.values)


Output ::

    x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


[[ 1.  1.]
 [ 2.  2.]
 [ 3.  3.]
 [nan  4.]]
 
 # Head & Tail --->
 
 # Head --> To view a small sample of a DataFrame object, use the head() and tail() methods. 
 # head() returns the first n rows (observe the index values). 
 # The default number of elements to display is five, but you may pass a custom number.
 
 # Head --> 
 
import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.head(1))

Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


     x  y
a  1.0  1

# Tail () --> tail() returns the last n rows (observe the index values). 
# The default number of elements to display is five, but you may pass a custom number.

import pandas as pd
d = {'x' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
   'y' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}
df = pd.DataFrame(d)
print (df)
print ('\n')
print (df.tail(2))

Output ::

     x  y
a  1.0  1
b  2.0  2
c  3.0  3
d  NaN  4


     x  y
c  3.0  3
d  NaN  4

*********************************** Python Pandas - Descriptive Statistics ***********************************

# A large number of methods collectively compute descriptive statistics and other releated operatins on DataFrame.

# Generally these operations take axis as input. Default axis=0 means rows and axis=1 means columns.

Sum() ::

Example 1 ::

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33])}
b=pd.DataFrame(a)
print (b)
print (b.sum())

# If we don't give any axis information in code, default it will consider as axis=0.

Output ::

   Seq          Name   Age
0    1         Phani  34.0
1    2         Aruna  29.0
2    3       Riyansh   1.0
3    4      Saaharsh   0.1
4    5  Koteswararao  59.0
5    6       Lakshmi  51.0
6    7        Satish  37.0
7    8      Srinivas  33.0
Seq                                                    36
Name    PhaniArunaRiyanshSaaharshKoteswararaoLakshmiSa...
Age                                                 244.1
dtype: object


# Axis=1 --> it will sum up the columns information.

Example 1:: 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([35,29,1,0.1,59,51,37,33]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.sum(1))

Output ::

   Seq          Name   Age  test
0    1         Phani  35.0     3
1    2         Aruna  29.0     4
2    3       Riyansh   1.0     5
3    4      Saaharsh   0.1     6
4    5  Koteswararao  59.0     7
5    6       Lakshmi  51.0     8
6    7        Satish  37.0     2
7    8      Srinivas  33.0     3
0    38.0
1    35.0
2     9.0
3    10.1
4    71.0
5    65.0
6    46.0
7    44.0
dtype: float64

# mean() --> Returns the average value.

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.mean())


Output ::

   Seq          Name   Age  test
0    1         Phani  34.0     3
1    2         Aruna  29.0     4
2    3       Riyansh   1.0     5
3    4      Saaharsh   0.1     6
4    5  Koteswararao  59.0     7
5    6       Lakshmi  51.0     8
6    7        Satish  37.0     2
7    8      Srinivas  33.0     3
Seq      4.5000
Age     30.5125
test     4.7500
dtype: float64

# std() --> This function returns the Bressel standard deviation of the numerical columns.

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)  Seq          Name   Age  test
0    1         Phani  34.0     3
1    2         Aruna  29.0     4
2    3       Riyansh   1.0     5
3    4      Saaharsh   0.1     6
4    5  Koteswararao  59.0     7
5    6       Lakshmi  51.0     8
6    7        Satish  37.0     2
7    8      Srinivas  33.0     3
Seq      2.449490
Age     21.009891
test     2.121320
dtype: float64

# count () --> This will returns the Number of non-null observations.

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.count())


Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq     9
Name    8
Age     9
test    8
dtype: int64

# mode () --> This will returns the mode of values 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.mode())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
   Seq          Name   Age  test
0    1         Aruna   0.1   3.0
1    2  Koteswararao   1.0   NaN
2    3       Lakshmi  10.0   NaN
3    4         Phani  29.0   NaN
4    5       Riyansh  33.0   NaN
5    6      Saaharsh  34.0   NaN
6    7        Satish  37.0   NaN
7    8      Srinivas  51.0   NaN
8    9           NaN  59.0   NaN


# min () --> This will returns the minimum of the column value 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.min())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq     1.0
Age     0.1
test    2.0
dtype: float64

# Max () --.> This will returns the maximum of the value 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.max())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq      9.0
Age     59.0
test     8.0
dtype: float64

# Describe() --> This function will retun the summarize of the DataFrame.


print (b.std())

Output ::

  Seq          Name   Age  test
0    1         Phani  34.0     3
1    2         Aruna  29.0     4
2    3       Riyansh   1.0     5
3    4      Saaharsh   0.1     6
4    5  Koteswararao  59.0     7
5    6       Lakshmi  51.0     8
6    7        Satish  37.0     2
7    8      Srinivas  33.0     3
Seq      2.449490
Age     21.009891
test     2.121320
dtype: float64

# count () --> This will returns the Number of non-null observations.

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.count())


Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq     9
Name    8
Age     9
test    8
dtype: int64

# mode () --> This will returns the mode of values 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.mode())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
   Seq          Name   Age  test
0    1         Aruna   0.1   3.0
1    2  Koteswararao   1.0   NaN
2    3       Lakshmi  10.0   NaN
3    4         Phani  29.0   NaN
4    5       Riyansh  33.0   NaN
5    6      Saaharsh  34.0   NaN
6    7        Satish  37.0   NaN
7    8      Srinivas  51.0   NaN
8    9           NaN  59.0   NaN


# min () --> This will returns the minimum of the column value 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.min())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq     1.0
Age     0.1
test    2.0
dtype: float64

# Max () --.> This will returns the maximum of the value 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.max())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
Seq      9.0
Age     59.0
test     8.0
dtype: float64

# Describe() --> This function will retun the summarize of the DataFrame.

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.describe())

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
            Seq        Age     test
count  9.000000   9.000000  8.00000
mean   5.000000  28.233333  4.75000
std    2.738613  20.808412  2.12132
min    1.000000   0.100000  2.00000
25%    3.000000  10.000000  3.00000
50%    5.000000  33.000000  4.50000
75%    7.000000  37.000000  6.25000
max    9.000000  59.000000  8.00000
 
# describe --> This function have below 3 sub functions.

1.object --> Summarizes String columns
2.number --> Summarizes number columns
3.all --> Summarizes all columns together (Should not pass it as a list value)

# Object --> 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.describe(include='object'))

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
           Name
count         8
unique        8
top     Lakshmi
freq          1

# number --> 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.describe(include='number'))

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
            Seq        Age     test
count  9.000000   9.000000  8.00000
mean   5.000000  28.233333  4.75000
std    2.738613  20.808412  2.12132
min    1.000000   0.100000  2.00000
25%    3.000000  10.000000  3.00000
50%    5.000000  33.000000  4.50000
75%    7.000000  37.000000  6.25000
max    9.000000  59.000000  8.00000

# all --> This will summarize the all values 

import numpy as np
import pandas as pd
a={'Seq':pd.Series([1,2,3,4,5,6,7,8,9]) , 'Name':pd.Series(['Phani','Aruna','Riyansh','Saaharsh','Koteswararao','Lakshmi','Satish','Srinivas']),
   'Age':pd.Series([34,29,1,0.1,59,51,37,33,10]),'test':pd.Series([3,4,5,6,7,8,2,3])}
b=pd.DataFrame(a)
print (b)
print (b.describe(include='all'))

Output ::

   Seq          Name   Age  test
0    1         Phani  34.0   3.0
1    2         Aruna  29.0   4.0
2    3       Riyansh   1.0   5.0
3    4      Saaharsh   0.1   6.0
4    5  Koteswararao  59.0   7.0
5    6       Lakshmi  51.0   8.0
6    7        Satish  37.0   2.0
7    8      Srinivas  33.0   3.0
8    9           NaN  10.0   NaN
             Seq     Name        Age     test
count   9.000000        8   9.000000  8.00000
unique       NaN        8        NaN      NaN
top          NaN  Lakshmi        NaN      NaN
freq         NaN        1        NaN      NaN
mean    5.000000      NaN  28.233333  4.75000
std     2.738613      NaN  20.808412  2.12132
min     1.000000      NaN   0.100000  2.00000
25%     3.000000      NaN  10.000000  3.00000
50%     5.000000      NaN  33.000000  4.50000
75%     7.000000      NaN  37.000000  6.25000
max     9.000000      NaN  59.000000  8.00000


************************************** Python Pandas - Function Application *************************************************

# To apply your own or another librarys function to pandas object. To apply these pansas function applications we should aware of 3 methods.
# Pipe ()
# apply () 
# applymap ()

# The method of applying the function depends on whether your function expects to operate element - wise Or row wise Or Column wise.

# Pipe () --> This is table wise function applications in Pandas. 
# apply () --> This is row wise or Column wise function operation.
# applymap () --> Element-wise function applications in Pandas.

Pipe () --> Custom functions can be performed by passing a function and an appropriate number of parameters. These are known as Pipe arguments. Hence the operation performed on the entire Series or Data Frame.
Example 1 ::

import numpy as np
import pandas as pd
def test(a,b):
    a+b
a=pd.Series(np.arange(6))
print (a)
b=a.pipe(test,4)
print (b)

Output :: 

0    0
1    1
2    2
3    3
4    4
5    5
dtype: int32
None

# Using pipe() Function Application on Pandas DataFrame ::


import pandas as pd
import numpy as np

def adder(ele1,ele2):
   return ele1+ele2

df = pd.DataFrame(np.random.randn(5,3),columns=['col1','col2','col3'])
print (df)
print(df.pipe(adder,2))
print (df.apply(np.mean))

Output ::

     col1      col2      col3
0  1.077882  0.169259 -0.844424
1  0.696658 -1.898089  0.996944
2 -0.048461 -0.335830 -1.020286
3  1.104273  0.320265  0.910502
4 -0.794878  1.338102  0.287789
       col1      col2      col3
0  3.077882  2.169259  1.155576
1  2.696658  0.101911  2.996944
2  1.951539  1.664170  0.979714
3  3.104273  2.320265  2.910502
4  1.205122  3.338102  2.287789
col1    0.407095
col2   -0.081259
col3    0.066105
dtype: float64

# Row or Column Wise Function Operations: apply() ::

# We can apply Arbitrary function to the axes of DataFrame or Panel ny using the apply () function.
# Arbitrary function is a function , that is free to define any where any way you want on DataFrame. 
# This function can be applied on the Series as well. This function will takes Optional axis input. By default this will take axis= 1 ( Column )
as Optional input.
# This will take every column as array.It enables the users to pass a function and then apply it to all the values of the DataFrame or Series.
# It is very big improvement to the lib to allow the segregation of the data according to the given conditions,make it effectively usable in ML.











